package com.hung.hazelcast.client;

import com.hazelcast.client.HazelcastClient;
import com.hazelcast.client.config.ClientConfig;
import com.hazelcast.client.config.XmlClientConfigBuilder;
import com.hazelcast.core.EntryView;
import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.map.IMap;
import com.hazelcast.transaction.TransactionContext;
import com.hazelcast.transaction.TransactionOptions;
import com.hazelcast.transaction.TransactionalMap;
import lombok.extern.slf4j.Slf4j;

import java.io.IOException;

/**
 * step1: run 2 server Node. Th·ª© t·ª± Start Server ko quan tr·ªçng => ch√∫ng t·ª± ƒë·ªông t·∫°o cluster (=group).
 * step2: run 2 client. Th·ª© t·ª± ko quan tr·ªçng. Client t·ª± ƒë·ªông t√¨m server trong gi·∫£i config.
 */

/**
 + run and restart app ƒë·ªÉ xem version thay ƒë·ªïi th·∫ø n√†o
 */
@Slf4j
public class App5_client_transaction {

	public static void main(String[] args) throws IOException {
		log.debug("=============================== start {}", App5_client_transaction.class.getSimpleName());
		// X√¢y d·ª±ng c·∫•u h√¨nh client b·∫±ng c√°ch ƒë·ªçc t·ª´ file XML.
		ClientConfig clientConfig = new XmlClientConfigBuilder("hazelcast-client.xml").build();

		/**
		 * client s·∫Ω t·∫°o socket non-blocking t·ªõi t·∫•t c·∫£ c√°c Server Node
		 */
		HazelcastInstance hzClient 	  = HazelcastClient.newHazelcastClient(clientConfig);

		/**
		 * v·ªõi IMap c√°c command write (put, remove) t·ª´ client s·∫Ω ko g√°n transactionId
		 * ch·ªâ khi ta t·∫°o transaction th√¨ m·ªõi c√≥
		 * -----
		 * transaction d√πng  ƒë·ªÉ rollback
		 * ----
		 * transactionId n√†y l√† UUID t·∫°o ·ªü client (ko ph·∫£i ·ªü server nh∆∞ DB or Zookeeper)
		 */
		TransactionOptions options = new TransactionOptions()
				.setTransactionType(TransactionOptions.TransactionType.TWO_PHASE);

		TransactionContext context = hzClient.newTransactionContext(options);
		context.beginTransaction();
		try {
			TransactionalMap<String, String> transactionMap = context.getMap("transactionMap");
			transactionMap.put("key", "value");

//			if (someConditionFails) {
//				context.rollbackTransaction(); //  rollback th·ªß c√¥ng
//				return;
//			}

			context.commitTransaction();
		}catch (Exception e) {
			context.rollbackTransaction(); // üëà rollback n·∫øu c√≥ exception
		}


        // Shutdown this Hazelcast client
//        hz.shutdown();
	}

}
